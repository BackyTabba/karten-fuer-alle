//$OpenStreetMap$
Object.assign(basemaps,{"OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
      })});
//$CartoDB.Positron$
Object.assign(basemaps,{"CartoDB Positron": L.tileLayer.provider("CartoDB.Positron")})
//$CartoDB.DarkMatter$
Object.assign(basemaps,{"CartoDB DarkMatter": L.tileLayer.provider("CartoDB.DarkMatter")}) //black
//$CartoDB.Voyager$
Object.assign(basemaps,{"CartoDB Voyager": L.tileLayer.provider("CartoDB.Voyager")})
//$OpenStreetMap.Mapnik$
Object.assign(basemaps,{"OpenStreetMap Mapnik": L.tileLayer.provider("OpenStreetMap.Mapnik")})
//$OpenTopoMap$
Object.assign(basemaps,{"OpenTopoMap": L.tileLayer.provider("OpenTopoMap")})
//$Stadia.AlidadeSmoothDark$
Object.assign(basemaps,{"Stadia AlidadeSmoothDark": L.tileLayer.provider("Stadia.AlidadeSmoothDark")}) //dark
//$Stadia.OSMBright$
Object.assign(basemaps,{"Stadia OSMBright": L.tileLayer.provider("Stadia.OSMBright")})
//$Esri.WorldImagery$
Object.assign(basemaps,{"Esri World Imagery":L.tileLayer.provider('Esri.WorldImagery')})
//$start$


<html>
<head>
    <!-- <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css" integrity="sha256-sA+zWATbFveLLNqWO2gtiw3HL/lh1giY/Inf1BJ0z14=" crossorigin=""> -->
    <!-- <script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js" integrity="sha256-o9N1jGDZrf5tS+Ft4gbIK7mYMipq9lqpVJ91xHSyKhg=" crossorigin=""></script> -->

    <!-- leaflet-toolbar -->
	<link rel="stylesheet" type="text/css" href="/node_modules/leaflet/dist/leaflet.css" />
	<link rel="stylesheet" type="text/css" href="/node_modules/leaflet-draw/dist/leaflet.draw.css" />
	<link rel="stylesheet" type="text/css" href="/node_modules/leaflet-toolbar/dist/leaflet.toolbar.css" />
    <link rel="stylesheet" href="/req/bootstrap3_1_1.theme.min.css"/>
	<link rel="stylesheet" href="/req/bootstrap3_1_1.min.css"/>
	<link rel="stylesheet" href="/req/bootstrap4_2_0_font_awesome.css"/>    
    <link rel="stylesheet" href="/node_modules/leaflet-draw-toolbar/dist/leaflet.draw-toolbar.css"/>
	<script src="/req/jquery1_11_1.min.js"></script>
	<script src="/req/jquery3_4_1.min.js"></script>
	<script src="/req/bootstrap3_1_1.min.js"></script>
	<script src="/node_modules/leaflet/dist/leaflet-src.js"></script>
	<script src="/node_modules/leaflet-toolbar/dist/leaflet.toolbar-src.js"></script>
	<script src="/node_modules/leaflet-draw/dist/leaflet.draw-src.js"></script>
    <script src="/node_modules/leaflet-draw-toolbar/dist/leaflet.draw-toolbar.js"></script>
	<script src="ColorPicker.js"></script>
	<script src="/node_modules/leaflet-providers/leaflet-providers.js"></script>
	<script src="/node_modules/socket.io/client-dist/socket.io.js"></script>
	<script src="envVars.js"></script>
	<script src="func.js"></script>
	<link rel="stylesheet" type="text/css" href="style.css"><link>
</head>
<body onload="OnMapLoad()"> 
<div id="map">
	<div class="overlay" id="headline"></div>
</div>
<input type="file" id="load-file" style="display:none" >
<script>
	IOactions=[]
	ToolbarActions=[]
	basemaps={}


//$Rectangle$

ToolbarActions=[...ToolbarActions,L.Toolbar2.DrawAction.Rectangle]

//$Circle$

ToolbarActions=[...ToolbarActions,L.Toolbar2.DrawAction.Circle]

//$Polygon$

ToolbarActions=[...ToolbarActions,L.Toolbar2.DrawAction.Polygon]

//$Polyline$

ToolbarActions=[...ToolbarActions,L.Toolbar2.DrawAction.Polyline]

//$Marker$

ToolbarActions=[...ToolbarActions,L.Toolbar2.DrawAction.Marker]

//$open$

IOactions=[...IOactions,openGeooutput]

//$save$

IOactions=[...IOactions,saveGeooutput]

//$end$

var map = L.map('map',{layers:basemaps["Stadia AlidadeSmoothDark"]}).setView([41.7896,-87.5996], 15),
	drawnItems = new L.FeatureGroup().addTo(map),
	editActions = [
		L.Toolbar2.EditAction.Popup.Edit,
		L.Toolbar2.EditAction.Popup.Delete,
		EditFromDB,
		L.Toolbar2.Action.extendOptions({
			toolbarIcon: { 
				className: 'leaflet-color-picker', 
				html: '<span class="fa fa-eyedropper"></span>' 
			},
			subToolbar: new L.Toolbar2({ actions: [
				L.ColorPicker.extendOptions({ color: '#db1d0f' }),
				L.ColorPicker.extendOptions({ color: '#025100' }),
				L.ColorPicker.extendOptions({ color: '#ffff00' }),
				L.ColorPicker.extendOptions({ color: '#0000ff' }),
				L.ColorPicker.extendOptions({ color: "#3388ff" })
			]})
		}),
		CloseToolbar
	];

var layerControl = L.control.layers(basemaps).addTo(map);
//var toolbar = new L.Toolbar2.DrawToolbar(); // empty toolbar

drawnItems.getLayerByRealID=function(RealID){
    for (x of drawnItems.getLayers()){
        //console.log("x.getRealID()==RealID: ",x.getRealID(),"==",RealID, " : ",x.getRealID()==RealID,x)
            if(x.getRealID()==RealID){
                return x;
            }

    }
    console.log(RealID + " is not part of drawnItems")
}
map.on('draw:created', function(evt) {
    console.log("draw:created", evt) //layer.renderer.leafletid == map._layers.leafletid!!!
    var	type = evt.layerType,
    layer = evt.layer;
    L.stamp(layer);
    id=drawnItems.getLayerId(evt);
    console.log("draw:created, getLayerId of eventlayer: " + id)
    layer.RealID=id;
    layer.getRealID=function(){return this.RealID};
    console.log("RealID",layer.RealID);
    console.log("created layer: ",layer)
    //console.log("content:",JSON.stringify(LayerToJson(layer)),"_id:",layer.RealID)
    console.log("DRAW:CREATED VOR DATENERMITTLUNG")
    $.get("/popup",{_id:layer.RealID},(doc,err)=>{
        console.log(doc)
        console.log("HALLO HIER WIRD GEÃ„NDERT_____________________________________________________________")
        console.log(layer)
        console.log(doc!=="")
        if(doc!==""){
        layer.feature.properties={...layer.feature.properties,...doc}
        console.log(layer)
        }   
            $.ajax({ // uploadData
                type: "POST",
                url: "/upload",
                data: {"content":JSON.stringify(LayerToJson(layer)),"_id":layer.RealID},
                success: console.log("Successful transmitted Creation of id:"+layer.RealID+"!")
            });
    })
    //https://gis.stackexchange.com/questions/171648/how-get-layerid-or-layer-name-from-marker
    layer.on("edit", function(evt) {
        layer = evt.target;
        parentRealID=evt.target._eventParents[Object.keys(evt.target._eventParents)].RealID
        //console.log("edited layer", evt.target)
        $.ajax({ // uploadData
            type: "POST",
            url: "/upload",
            data: {"content":JSON.stringify(LayerToJson(layer)),"_id":parentRealID},
            success: console.log("Successful transmitted Edit of id:"+parentRealID+"!")
        });	
    });
    layer.on('click', function(event) {
        new L.Toolbar2.EditToolbar.Popup(event.latlng, {
            actions: editActions
        }).addTo(map, layer);
    });
    drawnItems.addLayer(layer);
});

map.on("draw:deleted",(evt)=>{console.log("MAP: Now we could send delete post",evt)
    //console.log("RealID",evt.layers.getLayers()[0].RealID)
    //console.log(evt.layers.getLayers())
    layer=evt.layers.getLayers()[0];

    SourceLeafletId=Object.keys(evt.layers._layers)[0] //Key von source				
    for (x in evt.target._layers){
        //console.log()
        if(evt.target._layers[x]._layers!==undefined){
            //console.log(evt.target._layers[x]._layers)
            if(Object.keys(evt.target._layers[x]._layers)[0]==SourceLeafletId){
                mapLookupMatch=evt.target._layers[x]._layers,Object.keys(evt.target._layers[x]._layers)[0]
                mapLookupMatchParentLeafeltID=Object.keys(mapLookupMatch[SourceLeafletId]._eventParents)[0]
                mapLookupMatchParent=mapLookupMatch[SourceLeafletId]._eventParents[Object.keys(mapLookupMatch[SourceLeafletId]._eventParents)[0]]
                //console.log(mapLookupMatchParent.RealID)
            }
        }
    }
    console.log(window.location.url)
    $.ajax({
        type: "DELETE",
        url: "/upload",
        data: {"_id":mapLookupMatchParent.RealID},
        success: console.log("Successful transmitted Delete of id:"+mapLookupMatchParent.RealID+"!")
    });	
})

bar1= new L.Toolbar2.DrawToolbar({
    position: 'topleft',
    actions:ToolbarActions,
}).addTo(map);

bar2 = new L.Toolbar2.Control({
    position: 'topleft',
    actions: IOactions
}).addTo(map);
</script>
</body> 
</html>

